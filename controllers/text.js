import bot from '../main.js'
import { openai, ai_model } from '../config/openai_config.js';
import { logger } from '../config/logger_config.js';

export async function promptEmptyCommandHandler(msg, chatHistoryMap) {
    logger.info("EMPTY PROMPT HANDLER ACTIVATED");

    const chatId = msg.chat.id;
    const msgId = msg.message_id;

    const msgText = 
`
–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –±–æ—Ç–∞. 
–ß–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É: /prompt [—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞]
–í –≥—Ä—É–ø–ø–µ: –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
–í –ª–∏—á–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ: –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.

–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:

1. –ë—É–¥—å—Ç–µ —è—Å–Ω—ã–º–∏ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏: –ü—Ä–∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –±—ã—Ç—å —Ç–æ—á–Ω—ã–º–∏ –∏ —è—Å–Ω–æ –≤—ã—Ä–∞–∂–∞—Ç—å —Å–≤–æ—é –º—ã—Å–ª—å. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —á–∞—Ç–±–æ—Ç—É –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∞—à–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ—á–Ω—ã–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.

2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: –ü–æ–º–æ–≥–∏—Ç–µ —á–∞—Ç–±–æ—Ç—É –ø–æ–Ω—è—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —Ñ—Ä–∞–∑—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–æ–π –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –≤–∞—Å —Ç–µ–º–æ–π.

3. –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: –°–ª–æ–∂–Ω—ã–µ –∏–ª–∏ –∑–∞–ø—É—Ç–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –º–æ–≥—É—Ç –∑–∞—Ç—Ä—É–¥–Ω–∏—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ —á–∞—Ç–±–æ—Ç–æ–º, –ø–æ—ç—Ç–æ–º—É —Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –∏ –ø–æ–Ω—è—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.

4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏ –ø–æ–º–æ–≥—É—Ç —á–∞—Ç–±–æ—Ç—É –ª—É—á—à–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç.

5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–∂–ª–∏–≤—É—é –∏ —á–µ—Ç–∫—É—é —Ä–µ—á—å: –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–Ω—è—Ç–Ω—ã–µ —Ñ—Ä–∞–∑—ã. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å —á–∞—Ç–±–æ—Ç–æ–º –∏ –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

6. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–±—ä—è—Å–Ω–∏—Ç–µ, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ: –ï—Å–ª–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è.

7. –ë—É–¥—å—Ç–µ —Ç–µ—Ä–ø–µ–ª–∏–≤—ã: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —á–∞—Ç–±–æ—Ç—ã –º–æ–≥—É—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤. –ë—É–¥—å—Ç–µ —Ç–µ—Ä–ø–µ–ª–∏–≤—ã –∏ –¥–∞–π—Ç–µ –±–æ—Ç—É –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

`

    bot.sendMessage(chatId, msgText, {reply_to_message_id: msgId}).then(() => logger.info("msg sent"));
}

export async function promptCommandHandler(msg, prompt, chatHistoryMap) {

    logger.info("PROMPT HANDLER ACTIVATED")

    const chatId = msg.chat.id;
    const msgSender = msg.from;
    const msgId = msg.message_id;
    const msgThreadId = msg.message_thread_id;
    const msgText = prompt;

    console.log('msg text:', msgText);

    const chatHistoryId = `${chatId}${msgThreadId ? `_${msgThreadId}` : ''}`;
    console.log(chatHistoryId);

    if(!chatHistoryMap.has(chatHistoryId)) {
        chatHistoryMap.set(chatHistoryId, [{role: 'user', content: msgText}]);
    }
    else {
        chatHistoryMap.get(chatHistoryId).push({role: 'user', content: msgText});
    }

    console.log('current chat history: ', chatHistoryMap);

    const msgOptions = {
        parse_mode: 'MarkdownV2',
        reply_to_message_id: msgId
    }

    const chatCompletion = await sendMessageWithPlaceholder(chatId, chatHistoryId, chatHistoryMap, msgOptions);

    const botAnswer = chatCompletion.choices[0];

    try {
        logger.info("sending message...");
        bot.sendMessage(
            chatId, 
            createPromptMessage(msgSender, botAnswer.message.content), 
            msgOptions
        ).then(
            (msg) => {console.log('msg sent'); console.log(msg);}
        )
    
        chatHistoryMap.get(chatHistoryId).push(botAnswer.message);
    } catch (err) {
        console.error(err);
        bot.sendMessage(
            chatId, 
            `Error creating message: ${err}`
        ).then(
            (msg) => {console.log('error msg sent'); console.log(msg);}
        )
    }

}

export async function textMessageHandler(msg, chatHistoryMap) {
    logger.info("TEXT MSG HANDLER ACTIVATED");

    const chatId = msg.chat.id;
    const msgSender = msg.from;
    const msgId = msg.message_id;
    const msgThreadId = msg.message_thread_id;
    const msgText = msg.text;

    const msgOptions = {
        parse_mode: 'MarkdownV2',
        reply_to_message_id: msgId
    }

    const chatHistoryId = `${chatId}${msgThreadId ? `_${msgThreadId}` : ''}`;
    logger.info("CHAT ID / MESSAGE THREAD ID: " + chatHistoryId);

    if(!chatHistoryMap.has(chatHistoryId)) {
        chatHistoryMap.set(chatHistoryId, [{role: 'user', content: msgText}]);
    }
    else { 
        chatHistoryMap.get(chatHistoryId).push({role: 'user', content: msgText});
    }

    logger.debug('chat history map: ', chatHistoryMap);

    const chatCompletion = await sendMessageWithPlaceholder(chatId, chatHistoryId, chatHistoryMap, msgOptions);

    const botAnswer = chatCompletion.choices[0];

    try {
        logger.info("sending message...");
        bot.sendMessage(
            chatId, 
            createPromptMessage(msgSender, botAnswer.message.content), 
            msgOptions
        ).then(
            (msg) => {console.log('msg sent'); console.log(msg);}
        )
    
        chatHistoryMap.get(chatHistoryId).push(botAnswer.message);
    } catch (err) {
        console.error(err);
        bot.sendMessage(
            chatId, 
            `Error creating message: ${err}`
        ).then(
            (msg) => {console.log('error msg sent'); console.log(msg);}
        )
    }
    
}

// Sending&refreshing placeholder message while the main content is loading
async function sendMessageWithPlaceholder(chatId, chatHistoryId, chatHistoryMap, msgOptions) {

    let placeholderMsgID;
    let intervalID;
    let progressBar = "‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú"
    console.log('length: ', progressBar.length);
    let emptySymbol = "‚¨ú";
    let filledSymbol = "üü©"
    let currentSymbolType = filledSymbol;
    let index = 0;
    let placeholderText = `–°–æ–∑–¥–∞—é –æ—Ç–≤–µ—Ç\\.\\.\\.\n${progressBar}`
    await bot.sendMessage(chatId, placeholderText, msgOptions).then(result => placeholderMsgID = result.message_id);
    logger.info('generating bot response...')
    const beginTime = new Date().getTime();
    intervalID = setInterval(() => {
        // progressBar = progressBar.substring(0, index) + currentSymbolType + progressBar.substring(index+1);
        // progressBar = '';
        const symbols = [...progressBar]
        for(let i = 0; i < index; i++) {
            symbols[i] = filledSymbol
        }
        for(let j = index; j < 10; j++) {
            symbols[j] = emptySymbol;
        }
        progressBar = [...symbols].join('');
        // progressBar += filledSymbol;
        if(++index > 9) {
            index = 0;
            currentSymbolType = (currentSymbolType == filledSymbol) ? emptySymbol : filledSymbol;
        }
        placeholderText = `–°–æ–∑–¥–∞—é –æ—Ç–≤–µ—Ç...\n${progressBar}`
        console.log('progress bar : ', progressBar);
        bot.editMessageText(placeholderText, {chat_id: chatId, message_id: placeholderMsgID}).then(() => console.log('msg edited'));
    }, 1000);
    const chatCompletion = await openai.chat.completions.create({
        messages: [...chatHistoryMap.get(chatHistoryId)],
        model: ai_model
    });
    const endTime = new Date().getTime();
    logger.info("creation time: " + Math.abs(endTime - beginTime) + " ms");
    clearInterval(intervalID);
    bot.deleteMessage(chatId, placeholderMsgID)

    return chatCompletion;
}

// Format bot answer message
function createPromptMessage(sender, content) {

    const tokenCount = content.split(' ').length;
    const tokenCost = 0.000001;
    const msgCost = formatString((tokenCost * tokenCount).toFixed(6).toString());
    const formattedUsername = formatString(`${sender.first_name} ${sender.last_name}${sender.username ? ` - @${sender.username}` : ''}${` - *ID *${sender.id}`}`);
    const formattedContent = formatString(content);
    const formattedDatetime = formatString(formatDatetime(new Date()));

    const usernameString = `*–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: *${formattedUsername}`;
    const datetimeString = `*–î–∞—Ç–∞: *${formattedDatetime}`;
    const separatorString = '\\-\\-\\-';
    const contentString = `*–û—Ç–≤–µ—Ç: *${formattedContent}`;
    const wordCountString = `*–°–ª–æ–≤: *${tokenCount} —Å–ª–æ–≤`;
    const msgCostString = `*–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: *$${msgCost}`
    
    const promptMsg = 
`
${usernameString}
${datetimeString}
${separatorString}
${contentString}
${separatorString}
${wordCountString}
${msgCostString}
`

    return promptMsg;
}

// Format string for markdown parse mode - escape any special characters with backslashes
function formatString(str) {
    const specialCharacters = ['_', '-', '.', '!', '(', ')', '[', ']'];
    // for(const char of specialCharacters) {
    //     str = str.replaceAll(new RegExp(char, 'g'), `\\${char}`)
    // }
    return str
    .replace(/\_/g, "\\_")
    .replace(/\-/g, "\\-")
    .replace(/\./g, "\\.")
    .replace(/\!/g, "\\!")
    .replace(/\(/g, "\\(")
    .replace(/\)/g, "\\)")
    .replace(/\[/g, "\\[")
    .replace(/\]/g, "\\]");
}

// Format datetime to string
function formatDatetime(datetime) {
    return `${datetime.getFullYear()}-${(datetime.getMonth()+1).toString().padStart(2, '0')}-${datetime.getDate().toString().padStart(2, '0')} ${datetime.getHours().toString().padStart(2, '0')}:${datetime.getMinutes().toString().padStart(2, '0')}`
}
